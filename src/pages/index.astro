---
import SocialList from "@/components/SocialList.astro";
import PostPreview from "@/components/blog/PostPreview.astro";
import PageLayout from "@/layouts/Base.astro";
import { getAllPosts, sortMDByDate } from "@/utils";

const MAX_POSTS = 10;
const allPosts = await getAllPosts();
const allPostsByDate = sortMDByDate(allPosts).slice(0, MAX_POSTS);

const cactusTech: { desc: string; href: string; title: string }[] = [
  {
    desc: "Build fast websites, faster.",
    href: "https://astro.build",
    title: "Astro",
  },
  {
    desc: "Rapidly build modern websites without ever leaving your HTML.",
    href: "https://tailwindcss.com",
    title: "Tailwind CSS",
  },
  {
    desc: "Simple and easy-to-use markup language.",
    href: "https://www.markdownguide.org/",
    title: "Markdown",
  },
  {
    desc: "Markdown for the component era.",
    href: "https://mdxjs.com/",
    title: "MDX",
  },
  {
    desc: "Generating png Open Graph images for blog posts.",
    href: "https://github.com/vercel/satori",
    title: "Satori",
  },
  {
    desc: "A fully static search library.",
    href: "https://pagefind.app/",
    title: "Pagefind",
  },
  {
    desc: "An easy to use Icon component for Astro.",
    href: "https://github.com/natemoo-re/astro-icon#readme",
    title: "Astro Icon",
  },
  {
    desc: "Highly customisable source code & syntax highlighter",
    href: "https://expressive-code.com/",
    title: "Expressive Code",
  },
];
---

<PageLayout meta={{ title: "Home" }}>
  <section>
    <h1 class="title mb-6">Hello API!</h1>
    <p class="mb-4">
      Hi, Iâ€™m a theme for Astro, an example of how you can use this starter to create a personal
      blog. If you want to know more about how you can customise me, add more posts, and make it
      your own, click on the github icon link below and it will take you to my repo.
    </p>
    <!--<SocialList />-->
  </section>
  <section aria-label="Blog post list" class=" mt-12">
    <div class="flex flex-col items-center">
      <h2 class="title text-2xl font-bold mb-4">Search for Lyrics!</h2>
      <form id="lyricsForm" class="w-full max-w-sm">
        <div class="mb-4">
          <label for="author" class=" block text-lg pl-2.5 font-medium dark:text-accent text-gray-700">Author</label>
          <input type="text" id="author" name="author" class=" h-12 p-2.5 mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm" placeholder="Author name" required>
        </div>
        <div class="mb-4">
          <label for="songName" class=" block pl-2.5 text-lg font-medium dark:text-accent text-gray-700">Song Name</label>
          <input  type="text" id="songName" name="songName" class="h-12 p-2.5 mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm" placeholder="Song title" required>
        </div>
        <button type="submit" class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
          Search
        </button>
      </form>
    </div>
  </section>
  <section aria-label="Lyrics" class="mt-16" id="lyricsSection">
    <h2 class="title mb-4 text-xl">Lyrics</h2>
    <p id="lyrics"></p>
    <button id="resetButton" class="mt-4 inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-red-600 hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500" style="display: none;">
      Reset
    </button>
  </section>
</PageLayout>
<script type="module">
  document.addEventListener('DOMContentLoaded', () => {
    const form = document.getElementById('lyricsForm');
    const lyricsP = document.getElementById('lyrics');
    const resetButton = document.getElementById('resetButton');

    form.addEventListener('submit', async (e) => {
      e.preventDefault();
      const author = document.getElementById('author').value;
      const songName = document.getElementById('songName').value;
      await lyricsFetch(author, songName);
      form.reset(); // Reset the form fields
      resetButton.style.display = 'inline-flex'; // Show the reset button after a search
    });

    resetButton.addEventListener('click', () => {
      lyricsP.innerText = ''; // Clear the lyrics
      resetButton.style.display = 'none'; // Hide the reset button
    });
  });

  async function lyricsFetch(author, songName) {
    const response = await fetch(`https://api.lyrics.ovh/v1/${author}/${songName}`);
    const data = await response.json();
    console.log(data.lyrics);
    // Update the page with the fetched lyrics
    document.querySelector('#lyrics').innerText = data.lyrics || 'Lyrics not found';
  }
</script>
